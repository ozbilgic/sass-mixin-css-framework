/***************************************************************************
*  XCODE CSS MIXINS FRAMEWORK                                              *
*  @author  : xcode                                                        *
*  @version : 1.5.3                                                        *
*  @since   : 02.2016                                                      *
*  @mime    : Sass/Scss                                                    *
*  @contact : ozbilgiclevent@gmail.com                                     *
*                                                                          *
*--------------------------------------------------------------------------*
*  Features List »                                                         *
*--------------------------------------------------------------------------*
*  Functions:                                                              *
*    » Pixel converts the "em" format. [It was added in --v.1.0.0]         *
*                                                                          *
*  Mixins:                                                                 *
*    » CSS3 Prefix Adding. [It was added in --v.1.0.0]                     *
*    » Responsive Media Selector. [It was added in --v.1.0.0]              *
*    » Alternate Responsive Media Selector. [It was added in --v.1.0.0]    *
*    » Setting The Alpha Channel For Items. Support Cross Browser.         *
*    » Set Border Radius. [It was added in --v.1.0.0]                      *
*    » Set Shorthand Animation. [It was added in --v.1.0.0]                *
*    » Animation Creator. [It was added in --v.1.0.0]                      *
*    » Transition. [It was added in --v.1.0.0]                             *
*    » 2D Transforms. [It was added in --v.1.0.0]                          *
*    » 3D Transforms. [It was added in --v.1.0.0]                          *
*    » Change Input Placeholder Attributes. [It was added in --v.1.0.0]    *
*    » Change The Color of All Images to Black and White.                  *
*    » Horizontal Navigation Bar. [It was added in --v.1.1.0]              *
*    » Vertical Navigation Bar. [It was added in --v.1.1.0]                *
*    » Dropdown [It was added in --v.1.1.0]                                *
*    » Tooltip [It was added in --v.1.2.0]                                 *
*    » Box Shadow. [It was added in --v.1.2.0]                             *
*    » Gradients. [It was added in --v.1.2.0]                              *
*    » Image Filter. [It was added in --v.1.2.0]                           *
*    » Button to add animation. [It was added in --v.1.3.0]                *
*    » Add Font Icon. [It was added in --v.1.3.0]                          *
*    » Font Selector. [It was added in --v.1.4.0]                          *
*                                                                          *
*  Helpers:                                                                *
*    » Clearfix. [It was added in --v.1.5.0]                               *
*    » Affix. [It was added in --v.1.5.0]                                  *
*--------------------------------------------------------------------------*
*  Contributors »                                                          *
*--------------------------------------------------------------------------*
*  ...                                                                     *
****************************************************************************/

/**
 *  FONT ICONS »
 */

@import "font.icons";


/**
 *  VARIABLES »
 */

$baseFontName: null !default; //Enter the name of the font you use. Required to font-select mixin.
                              //Ex. 'Roboto'

$cellphone:       cp      !default;   //320px
$smartphone:      sp      !default;   //480px
$tablet:          tablet  !default;   //768px
$desktop:         desktop !default;   //992px
$largeScreen:     ls      !default;   //1200px
$fullScreen:      fs      !default;   //>1200px

$cellphoneSize:   320px   !default;
$smartphoneSize:  480px   !default;
$tabletSize:      768px   !default;
$desktopSize:     992px   !default;
$largeScreenSize: 1200px  !default;
$fullScreenSize:  1200px  !default;

$white:           #FFFFFF !default;
$black:           #000000 !default;
$baseFontPixel:   14px    !default;


/**
 *  FUNCTIONS »
 */

/**
 *  » Pixel converts the "em" format.
 *  Warning: Specify the base font size before use. ($baseFontPixel, Default size 16px.)
 *  Function Name: @convert_em($fontPx)
 *  ---
 *  Parameter Descriptions:
 *  @param $fontPx = Font Size.
 *  ---
 *  @return em
 *
 *  Usage:
 *    p {
 *      font-size: convert_em(14px);
 *    }
 */
@function convert_em($fontPx) {
  @return ($fontPx / $baseFontPixel) * 1em;
}


/**
 *  MIXINS »
 */

/**
 *  » CSS3 Prefix Adding.
 *  Mixin Name: @prefix($property, $args...)
 *  ---
 *  Parameter Descriptions:
 *  @param $property: Css property name. Ex. "transition, "border-radius"...
 *  @param $args: For the selected attribute values. Ex. "color .3s", "15px"...
 *
 *  Usage:
 *     .box {
 *       Width: 300px;
 *       height: 300px;
 *       @include prefix(border-radius, 5px);
 *     }
 */
@mixin prefix($property, $args...) {
  -webkit-#{$property}: #{$args};
     -moz-#{$property}: #{$args};
      -ms-#{$property}: #{$args};
       -o-#{$property}: #{$args};
          #{$property}: #{$args};
}


/**
 *  » Responsive Media Selector.
 *  Mixin Name: @media($media)
 *  ---
 *  Parameter Descriptions:
 *  @param $media = $cellphone, $smartphone, $tablet, $desktop,
 *                  $largeScreen or "nil" when full screen
 *
 *  Usage:
 *    nav[data=main-menu] {
 *      @include media($desktop) {
 *        display: none;
 *      }
 *    }
 */
@mixin media($media) {
  @if $media == cp {
    @media (max-width: $cellphoneSize) {@content;}
  }
  @else if $media == sp {
    @media (max-width: $smartphoneSize) {@content;}
  }
  @else if $media == tablet {
    @media (max-width: $tabletSize) {@content;}
  }
  @else if $media == desktop {
    @media (max-width: $desktopSize) {@content;}
  }
  @else if $media == ls {
    @media (max-width: $largeScreenSize) {@content;}
  }
  @else {
    @media (min-width: $fullScreenSize) {@content;}
  }
}


/**
 *  » Alternate Responsive Media Selector.
 *    - This selective media can be entered in any desired resolution.
 *  Mixin Name: @media-query($minMax, $width, $eWidth: 0)
 *  ---
 *  Parameter Descriptions:
 *  @param $minMax = min or max. (min-width, max-width)
 *  @param $width, $eWidth = $cellphoneSize, $smartphoneSize, $tabletSize,
 *                           $desktopSize, $largeScreenSize, $fullScreenSize
 *  @param $eWidth = Any screen resolution size.
 *
 *  Usage:
 *    nav.nav-content {
 *      @include media-query(min, $desktop) {
 *        display: none;
 *      }
 *    }
 *
 *    h1.caption {
 *      @include media-query(max, nil, 300px) {
 *        font-size: 20%;
 *      }
 *    }
 */
@mixin media-query($minMax, $width, $eWidth: 0) {
  @if $width == cp {$width: $cellphoneSize}
  @else if $width == sp {$width: $smartphoneSize}
  @else if $width == tablet {$width: $tabletSize}
  @else if $width == desktop {$width: $desktopSize}
  @else {$width: $largeScreenSize}

  @if $eWidth > 0 {
    @if $minMax == min {
      @media (min-width: $eWidth) {
        @content;
      }
    }
    @else {
      @media (max-width: $eWidth) {
        @content;
      }
    }
  }
  @else {
    @if $minMax == min {
      @media (min-width: $width) {
        @content;
      }
    } @else {
      @media (max-width: $width) {
        @content;
      }
    }
  }
}


/**
 *  » Setting The Alpha Channel For Items.
 *  Mixin Name: @opacity($opacity: .85)
 *  ---
 *  Parameter Descriptions:
 *  @param $opacity = 0..1
 *
 *  Usage:
 *    a:hover {
 *      @include opacity(.7)
 *    }
 */
@mixin opacity($opacity: .85) {
  opacity: $opacity;
  filter: alpha(opacity = $opacity * 100); /* For IE8 and earlier */
}


/**
 *  » Set Border Radius.
 *  Mixin Name: @border-radius($radius)
 *  ---
 *  Parameter Descriptions:
 *  @param $radius = You know that ;)
 *
 *  Usage:
 *    div.box {
 *      @include border-radius(15px)
 *    }
 */
@mixin border-radius($radius) {
  @include prefix('border-radius', $radius);
}


/**
 *  » Set Shorthand Animation.
 *  Tip: You can use this feature with keyframes
 *  Mixin Name: @animation($args...)
 *  ---
 *  Parameter Descriptions:
 *  @param $args = {
 *                   Animation name,
 *                   Duration,
 *                   Timing function,
 *                   Delay,
 *                   Iteration count,
 *                   Direction
 *                 }
 *
 *  Usage:
 *    div.anim {
 *      width: 100px;
 *      height: 100px;
 *      position: relative;
 *      background-color: red;
 *      @include animation('example 4s 3 alternate');
 *    }
 */
@mixin animation($args...) {
  @include prefix('animation', $args);
}


/**
 *  » Animation Creator.
 *  Mixin Name: keyframes($animationName)
 *  Tip: See those for features (Link: http://www.w3schools.com/cssref/css_animatable.asp)
 *  ---
 *  Parameter Descriptions:
 *  @param $animationName = Name of the animation. You can put any name.
 *
 *  Usage:
 *    @include keyframes(example) {
 *      0%   {background-color: red; left:0px; top:0px;}
 *      25%  {background-color: yellow; left:200px; top:0px;}
 *      50%  {background-color: blue; left:200px; top:200px;}
 *      75%  {background-color: green; left:0px; top:200px;}
 *      100% {background-color: red; left:0px; top:0px;}
 *    }
 *
 *    div.anim {
 *      width: 100px;
 *      height: 100px;
 *      position: relative;
 *      background-color: red;
 *      @include animation('example 4s 3 alternate');
 *    }
 */
@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-ms-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}


/**
 *  » Transition.
 *  Mixin Name: @transition($args...)
 *  ---
 *  Parameter Descriptions:
 *  @param $args = {
 *                   Property,
 *                   Duration,
 *                   Timing function,
 *                   Delay
 *                 }
 *
 *  Usage#1:
 *    a {
 *      color: gray;
 *      @include transition(color .3s ease);
 *
 *      &:hover {
 *        color: black;
 *      }
 *    }
 *
 *  Usage#2:
 *    header.navbar {
 *      min-height: 60px;
 *      position: fixed;
 *      margin: 0 auto;
 *      @include transition(.4s);
 *    }
 *
 *    .navbg-black {
 *       background-color: #000 !important;
 *    }
 *
 *    header.navbar slowly change color to adding .navbg-black class.
 */
@mixin transition($args...) {
  @include prefix('transition', $args);
}


/**
 *  » 2D Transforms.
 *  Mixin Name: transform2d($method)
 *  Tip: See at examples (Link: http://www.w3schools.com/css/css3_2dtransforms.asp)
 *  ---
 *  Parameter Descriptions:
 *  @param $method = Method name.
 *  Method List {
 *                translate(x,y), translateX(n), translateY(n),
 *                rotate(angle),
 *                scale(x,y), scaleX(n), scaleY(n),
 *                skew(x-angle, y-angle), skewX(angle), skewY(angle),
 *                matrix(n,n,n,n,n,n)
 *              }
 *
 *  Usage:
 *    div.rotate {
 *      @include transform2d(rotate(20deg));
 *    }
 */
@mixin transform2d($method) {
  @include prefix('transform', $method);
}


/**
 *  » 3D Transforms.
 *  Mixin Name: transform3d($method)
 *  ---
 *  Parameter Descriptions:
 *  @param $method = Method name.
 *  Method List {
 *                translate3d(x,y,z), translateX(x), translateY(y), translateZ(z),
 *                rotate3d(x,y,z,angle), rotateX(angle), rotateY(angle), rotateZ(angle),
 *                scale3d(x,y,z), scaleX(x), scaleY(y), scaleY(z),
 *                matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n),
 *                perspective(n)
 *              }
 *
 *  Usage:
 *    div.rotate {
 *      @include transform3d(rotateZ(90deg));
 *    }
 */
@mixin transform3d($method) {
  @include prefix('transform', $method);
}


/**
 *  » Change Input Placeholder Attributes.
 *  Mixin Name: change-input-placeholder()
 *  ---
 *  Supported placeholder styles: {
 *      font
 *      color
 *      background
 *      word-spacing
 *      letter-spacing
 *      text-decoration
 *      vertical-align
 *      text-transform
 *      line-height
 *      text-indent
 *      opacity
 *  }
 *
 *  Usage:
 *    input[type="email"] {
 *      @include change-input-placeholder() {
 *        color: orange;
 *      }
 *    }
 */
@mixin change-input-placeholder() {
  &::-webkit-input-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
}


/**
 *  » Change The Color of All Images to Black and White. - DEPRECATED.
 *  Note: Instead of Image Filter use. It will be removed in version 2.0
 *  Mixin Name: grayscale($value)
 *  Tip: 0..100, 100 full gray.
 *  Warning: IE not supported.
 *  ---
 *  Parameter Descriptions:
 *  @param $value = Percent.
 *
 *  Usage:
 *    img.poster {
 *      @include grayscale(20%);
 *    }
 */
@mixin grayscale($percent) {
  @warn "The `grayscale($percent)` mixin will be deprecated in version 1.2.1";
  -webkit-filter: "grayscale(#{$percent})";
  filter: "grayscale(#{$percent})";
}



/**
 *  » Horizontal Navigation Bar.
 *  Mixin Name: @h-navbar(
 *                    $width: 200px,
 *                    $bgColor: #f1f1f1,
 *                    $textColor: #000,
 *                    $hoverBgColor: #555,
 *                    $hoverTextColor: white,
 *                    $activeLinkBgColor: #4CAF50,
 *                    $activeLinkTextColor: white,
 *                    $isFullHeight: false)
 *  ---
 *  Parameter Descriptions:
 *  @param $width = Navigation bar width. Default size: 200px. Tip: Percentage value enterable.
 *  @param $bgColor = Navigation bar background color. Default color: #f1f1f1.
 *  @param $textColor = Link text color. Default color: #000.
 *  @param $hoverBgColor = Link hover background color. Default color: #555.
 *  @param $hoverTextColor = Link hover text color. Default color: #fff.
 *  @param $activeLinkBgColor = Active link background color. Default color: #4CAF50.
 *  @param $activeLinkTextColor = Active link text color. Default color: #fff.
 *  @param $isFullHeight = Full height navigation bar. Default value: false.
 *
 *  Usage 1:
 *    #nav {
 *      @include h-navbar(300px);
 *    }
 *
 *    <div id="nav">
 *       <ul>
 *         <li><a class="active" href="#home">Home</a></li>
 *         <li><a href="#news">News</a></li>
 *         <li><a href="#contact">Contact</a></li>
 *         <li><a href="#about">About</a></li>
 *       </ul>
 *   </div>
 *
 *  Usage 2:
 *    #nav {
 *      @include h-navbar($width:150px, $isFullHeight:true);
 *    }
 *
 *    <div id="nav">
 *       <ul>
 *         <li><a class="active" href="#home">Home</a></li>
 *         <li><a href="#news">News</a></li>
 *         <li><a href="#contact">Contact</a></li>
 *         <li><a href="#about">About</a></li>
 *       </ul>
 *   </div>
 */
@mixin h-navbar(
            $width: 200px,
            $bgColor: #f1f1f1,
            $textColor: #000,
            $hoverBgColor: #555,
            $hoverTextColor: white,
            $activeLinkBgColor: #4CAF50,
            $activeLinkTextColor: white,
            $isFullHeight: false) {
  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    width: $width;
    background-color: $bgColor;
    @if ($isFullHeight) {
      height: 100%; /* Full height */
      position: fixed; /* Make it stick, even on scroll */
      overflow: auto; /* Enable scrolling if the sidenav has too much content */
    }


    li a {
      display: block;
      color: $textColor;
      padding: 8px 0 8px 16px; /* Link height change it */
      text-decoration: none;

      .active {
        background-color: $activeLinkBgColor;
        color: $activeLinkTextColor;
      }

      &:hover:not(.active) {
        background-color: $hoverBgColor;
        color: $hoverTextColor;
      }
    }
  }
}


/**
 *  » Vertical Navigation Bar.
 *  Mixin Name: @mixin v-navbar(
 *                    $bgColor: #333,
 *                    $textColor: white,
 *                    $hoverBgColor: #111,
 *                    $activeLinkBgColor: #4CAF50,
 *                    $isDivider: false,
 *                    $dividerColor: #bbb)
 *  ---
 *  Parameter Descriptions:
 *  @param $bgColor = Navigation bar background color. Default color: #333.
 *  @param $textColor = Link text color. Default color: #fff.
 *  @param $hoverBgColor = Link hover background color. Default color: #111.
 *  @param $activeLinkBgColor = Active link background color. Default color: #4CAF50.
 *  @param $isDivider = Divider inserts links. Default value: false.
 *  @param $dividerColor = Dividers color. Default color: #bbb.
 *
 *  Usage:
 *    #nav {
 *      @include v-navbar($isDivider:true);
 *    }
 *
 *    <div id="nav">
 *       <ul>
 *         <li><a class="active" href="#home">Home</a></li>
 *         <li><a href="#news">News</a></li>
 *         <li><a href="#contact">Contact</a></li>
 *         <li style="float:right"><a href="#about">About</a></li> <!-- right link element -->
 *       </ul>
 *    </div>
 */
@mixin v-navbar(
          $bgColor: #333,
          $textColor: white,
          $hoverBgColor: #111,
          $activeLinkBgColor: #4CAF50,
          $isDivider: false,
          $dividerColor: #bbb) {
  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: $bgColor;

    li {
      float: left;
      @if ($isDivider) {
        border-right: 1px solid $dividerColor;
      }

      a {
        display: block;
        color: $textColor;
        text-align: center;
        padding: 14px 16px; /* Link height or width change it */
        text-decoration: none;

        .active {
          background-color: $activeLinkBgColor;
        }

        &:hover:not(.active) {
          background-color: $hoverBgColor;
        }
      }

      @if ($isDivider) {
        &:last-child {
          border-right: none;
        }
      }
    }
  }
}


/**
 *  » Dropdown
 *  Mixin Name: @mixin dropdown(
 *                  $btnBgColor: #4CAF50,
 *                  $btnTextColor: white,
 *                  $contentWidth: 160px,
 *                  $linkTextColor: black,
 *                  $linkHoverBgColor: #f1f1f1)
 *  ---
 *  Parameter Descriptions:
 *  @param $btnBgColor: Dropdown button background color. Default color: #4CAF50.
 *  @param $btnTextColor: Button text color. Default color: #fff.
 *  @param $contentWidth: Dropdown content width. Default value: 160px.
 *  @param $linkTextColor: Link text color. Default color: #000.
 *  @param $linkHoverBgColor: Link hover background color. Default color: #f1f1f1.
 *
 *  Usage:
 *    #drop {
 *       @include dropdown();
 *    }
 *
 *    <div id="drop">
 *      <div class="dropdown">
 *        <button class="dropbtn">Dropdown</button>
 *        <div class="dropdown-content">
 *          <a href="#">Link 1</a>
 *          <a href="#">Link 2</a>
 *          <a href="#">Link 3</a>
 *        </div>
 *      </div>
 *    </div>
 */
@mixin dropdown(
            $btnBgColor: #4CAF50,
            $btnTextColor: white,
            $contentWidth: 160px,
            $contentColor: #f9f9f9,
            $linkTextColor: black,
            $linkHoverBgColor: #f1f1f1) {

  .dropbtn {
    background-color: $btnBgColor;
    color: $btnTextColor;
    padding: 16px;
    font-size: 16px;
    border: none;
    cursor: pointer;
  }

  .dropdown {
    position: relative;
    display: inline-block;

    &:hover .dropdown-content {
      display: block;
    }

    &:hover .dropbtn {
      background-color: darken($btnBgColor, 10%);
    }
  }

  .dropdown-content {
    display: none;
    position: absolute;
    background-color: $contentColor;
    min-width: $contentWidth; /* width: 100% => .dropdown-content width = .dropbtn width. */
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);

    a {
      color: $linkTextColor;
      padding: 12px 16px;
      text-decoration: none;
      display: block;

      &:hover {background-color: $linkHoverBgColor}
    }
  }
}


/**
 *  » Tooltip
 *  Mixin Name: @mixin tooltip(
 *                  $position: top,
 *                  $bgColor: #000,
 *                  $textColor: #fff,
 *                  $height: 5px)
 *  ---
 *  Parameter Descriptions:
 *  @param $position: Tooltip position. Values(top, bottom, left, right). Default value: top.
 *  @param $bgColor: Tooltip background color. Default color: #000.
 *  @param $textColor: Tooltip text color. Default color: #fff.
 *  @param $height: Tooltip height. Default value: 5px.
 *
 *  Usage:
 *    #tooltip {
 *      @include tooltip(bottom, $height: 10px);
 *    }
 *
 *    <div id="tooltip">
 *      <div class="tooltip">Hover over me
 *        <span class="tooltiptext">Tooltip text</span>
 *      </div>
 *    </div>
 */
@mixin tooltip($position: top, $bgColor: #000, $textColor: #fff, $height: 5px) {
  .tooltip {
    position: relative;
    display: inline-block;

    .tooltiptext {
      visibility: hidden;
      width: 120px;
      background-color: $bgColor;
      color: $textColor;
      text-align: center;
      border-radius: 6px;
      padding: $height 0;
      position: absolute;
      z-index: 1;
      @if ($position == top) {
        bottom: 150%;
        left: 50%;
        margin-left: -60px;
      }
      @else if($position == bottom) {
        top: 150%;
        left: 50%;
        margin-left: -60px;
      }
      @else if($position == right) {
        top: -$height;
        left: 110%;
      }
      @else if($position == left) {
        top: -$height;
        right: 110%;
      }

      &:after {
        content: " ";
        position: absolute;
        border: 5px solid transparent;
        @if ($position == top) {
          top: 100%;
          left: 50%;
          border-top-color: $bgColor;
          margin-left: -5px;
        }
        @else if($position == bottom) {
          bottom: 100%;
          left: 50%;
          border-bottom-color: $bgColor;
          margin-left: -5px;
        }
        @else if($position == right) {
          right: 100%;
          top: 50%;
          border-right-color: $bgColor;
          margin-top: -5px;
        }
        @else if($position == left) {
          left: 100%;
          top: 50%;
          border-left-color: $bgColor;
          margin-top: -5px;
        }
      }
    }

    &:hover .tooltiptext {
      visibility: visible;
    }
  }
}


/**
 *  » Box Shadow.
 *  Mixin Name: @mixin box-shadow($args...)
 *  ---
 *  Parameter Descriptions:
 *  @param $args: Values(Horizontal shadow, Vertical shadow, Blur, Shadow color)
 *
 *  Usage:
 *    .box {
 *      width: 300px;
 *      height: 200px;
 *      @include box-shadow(0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19));
 *    }
 *
 *    <div class="box"></div>
 */
@mixin box-shadow($args...) {
  @include prefix('box-shadow', $args);
}


/**
 *  » Gradients.
 *  Mixin Name: @mixin gradient($type: linear, $style: diagonal, $args...)
 *  Tip: See at examples. Link: http://www.w3schools.com/css/css3_gradients.asp
 *  ---
 *  Parameter Descriptions:
 *  @param $type: Values(linear or radial). Default value: linear.
 *  @param $style: Values(top-bottom, left-right, diagonal or angle). Default value: diagonal.
 *  @param $angle: Degree. Tip: Enter this value if selected style: angle. Default value: 45deg.
 *  @param $args: Color-stop#1, Color-stop#2...
 *
 *  Usage 1:
 *    .grad {
 *      Width: 300px;
 *      height: 150px;
 *      @include gradient($args: #000, #fff);
 *    }
 *
 *    <div class="grad"></div>
 *
 *  Usage 2:
 *    .grad {
 *      Width: 300px;
 *      height: 150px;
 *      @include gradient($style: angle, $angle: -90deg, $args: #000, #fff);
 *    }
 *
 *    <div class="grad"></div>
 */
@mixin gradient($type: linear, $style: diagonal, $angle: 45deg, $args...) {
  background: white; /* For browsers that do not support gradients */
  @if ($type == linear) {
    @if ($style == diagonal) {
      background: -webkit-linear-gradient(left top, $args);
      background: -o-linear-gradient(bottom right, $args);
      background: -moz-linear-gradient(bottom right, $args);
      background: linear-gradient(to bottom right, $args);
    }
    @else if ($style == top-bottom) {
      background: -webkit-linear-gradient($args);
      background: -o-linear-gradient($args);
      background: -moz-linear-gradient($args);
      background: linear-gradient($args);
    }
    @else if ($style == left-right) {
      background: -webkit-linear-gradient(left, $args);
      background: -o-linear-gradient(right, $args);
      background: -moz-linear-gradient(right, $args);
      background: linear-gradient(to right, $args);
    }
    @else if($style == angle) {
      background: -webkit-linear-gradient($angle, $args);
      background: -o-linear-gradient($angle, $args);
      background: -moz-linear-gradient($angle, $args);
      background: linear-gradient($angle, $args);
    }
  }
  @else {
    background: -webkit-repeating-radial-gradient($args);
    background: -o-repeating-radial-gradient($args);
    background: -moz-repeating-radial-gradient($args);
    background: repeating-radial-gradient($args);
  }
}


/**
 *  » Image Filter.
 *  Mixin Name: @mixin image-filter($filterType: grayscale, $args...)
 *  Warning: IE not supported.
 *  ---
 *  Parameter Descriptions:
 *  @params $filterType: Filter type. Default value: grayscale.
 *    Filters can be applied:
 *    blur: Applies a blur effect to the image. A larger value will create more blur. Argument value (px).
 *    brightness: Adjusts the brightness of the image. Argument value (%).
 *    contrast: Adjusts the contrast of the image. Argument value (%).
 *    drop-shadow: Applies a drop shadow effect to the image. Argument value (h-shadow, v-shadow, blur, spread, color)
 *    grayscale: Converts the image to grayscale.  Argument value (%).
 *    hue-rotate: Applies a hue rotation on the image. Argument value (deg).
 *    invert: Inverts the samples in the image. Argument value (%).
 *    opacity: Sets the opacity level for the image. Argument value (%).
 *    saturate: Saturates the image. Argument value (%).
 *    sepia: Converts the image to sepia. Argument value (%).
 *    url: The url() function takes the location of an XML file that specifies an SVG filter, and may include an anchor to a specific filter element.
 *      Example: url(svg-url#element-id)
 *
 *  Usage 1:
 *    .filter {
 *      @include image-filter(blur, 5px);
 *    }
 *
 *    <div class="filter>
 *      <img src="image.jpg">
 *    </div>
 *
 *  Usage 2:
 *    #nav ul li a {
 *      @include image-filter($args: 100%);
 *      @include transition(.3s);
 *    }
 *
 *    #nav ul li a:hover {
 *      @include image-filter($args: 0);
 *    }
 *
 *    <div id="nav">
 *      <ul>
 *        <li><a href="#"><img src="link1.jpg"></a></li>
 *        <li><a href="#"><img src="link2.jpg"></a></li>
 *      </ul>
 *    </div>
 */
@mixin image-filter($filterType: grayscale, $args...) {
  img {
    -webkit-filter: $filterType+'('+$args+')';
    filter: $filterType+'('+$args+')';
  }
}


/**
 *  » Button to add animation.
 *  Mixin Name: @mixin add-button-animation($content: '»')
 *  Tip: You can use icon fonts.
 *  ---
 *  Parameter Descriptions:
 *  @params $content: Icon will appear when hovering over the button. Default value: '»'.
 *
 *  Usage:
 *    .button {
 *      display: inline-block;
 *      border-radius: 4px;
 *      background-color: #555555;
 *      border: none;
 *      color: #FFFFFF;
 *      text-align: center;
 *      font-size: 28px;
 *      padding: 25px;
 *      width: 200px;
 *      cursor: pointer;
 *      margin: 5px;
 *
 *      @include add-button-animation();
 *    }
 *
 *   <button class="button">
 *     <span>Hover</span>
 *   </button>
 */
@mixin add-button-animation($content: '»') {
  span {
    cursor: pointer;
    display: inline-block;
    position: relative;
    @include transition(.5s);

    &:after {
      content: $content;
      position: absolute;
      opacity: 0;
      top: 0;
      right: -20px;
      @include transition(.5s);
    }
  }

  &:hover span {
    padding-right: 25px;

    &:after {
      opacity: 1;
      right: 0;
    }
  }
}


/**
 *  » Add Font Icon.
 *  Mixin Name: @mixin add-font-icon($icon, $direction: right, $size: 14px, $color: #000 $padding: 0)
 *  Tip: Icon list. Link: https://fortawesome.github.io/Font-Awesome/icons/
 *  ---
 *  Parameter Descriptions:
 *  @param $icon: Icon name. Tip: See for icon list ($f-*)
 *  @param $direction: Icon direction. Default value: right.
 *  @param $size: Icon Size. Default size: 14px.
 *  @param $color: Icon color. Default color: #111.
 *  @param $padding: Icon padding. Default value: 0px.
 *
 *  Usage:
 *    .chart {
 *      color: white;
 *      @include font-select('m', 20px);
 *
 *      i {
 *        @include add-font-icon($f-bar-chart, $color: white);
 *      }
 *    }
 *
 *   <div class="chart">
 *     The Chart &nbsp;
 *     <i></i>
 *   </div>
 */
@mixin add-font-icon($icon, $direction: right, $size: 14px, $color: #111, $padding: 0) {
  display: inline-block;
  font: normal normal normal 14px/1 FontAwesome;
  font-size: inherit;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  @if($direction == left) {
    &:before {
      content: $icon;
      font-size: convert_em($size);
      color: $color;
      @if($padding > 0) {
        padding-right: $padding;
      }
    }
  }
  @else {
    &:after {
      content: $icon;
      font-size: convert_em($size);
      color: $color;
      @if($padding > 0) {
        padding-left: $padding;
      }
    }
  }
}


/**
 *  » Font Selector.
 *  Mixin Name: @mixin font-select($fontType: 'r', $size: $baseFontPixel, $spacing: 0.5px, $fontName: $baseFontName)
 *  Note: Before use, enter the value of $baseFontName.
 *  Warning: Use this when you import the fonts to your project:
 *    @font-face {
 *      font-family: RobotoThin;
 *      src: url(font/roboto_thin.woff);
 *    }
 *  ---
 *  Parameter Descriptions:
 *  @param $fontType: Values('t', 'l', 'r', 'm', 's', 'b')
 *    t: Thin.
 *    l: Light.
 *    r: Regular.
 *    m: Medium.
 *    s: Semibold.
 *    b: Bold.
 *  @param $size: Font size. Default value: Base font size.
 *  @param $spacing: Letter spacing. Default value: -0.5px.
 *  @param $fontName: Font name. Default value: Base font name.
 *
 *  Usage:
 *    .caption {
 *      @include font-select('m', 18px);
 *    }
 *
 *    <p class="caption">This is caption.</p>
 */
@mixin font-select($fontType: 'r', $size: $baseFontPixel, $spacing: 0.5px, $fontName: $baseFontName) {
  @if($fontName == null) {
    &:before {
      content: '@Error: The font name is null! See "_xcode.css.mixins.fw.scss" at line:55';
      font-weight: bold;
      color: red;
    }
  }
  @else {
    @if ($fontType == 't') {
      font-family: $fontName+'Thin', sans-serif;
    } @else if ($fontType == 'l') {
      font-family: $fontName+'Light', sans-serif;
    } @else if ($fontType == 'r') {
      font-family: $fontName+'Regular', sans-serif;
    } @else if ($fontType == 'm') {
      font-family: $fontName+'Medium', sans-serif;
    } @else if ($fontType == 's') {
      font-family: $fontName+'Semibold', sans-serif;
    } @else if ($fontType == 'b') {
      font-family: $fontName+'Bold', sans-serif;
    }

    font-size: convert_em($size);
    letter-spacing: -$spacing;
  }
}


/**
 *  HELPERS »
 */

/**
 *  » Clearfix.
 *  Helper Name: %clearfix
 *
 *  Usage:
 *    .container {
 *      background-color: #f1f1f1;
 *      @extend %clearfix;
 *    }
 *
 *    .wrapper {
 *      width: 300px;
 *      height: 200px;
 *      float: left;
 *      background-color: #222;
 *      margin: 10px;
 *    }
 *
 *    <div class="container">
 *      <div class="wrapper"></div>
 *      <div class="wrapper"></div>
 *    </div>
 */
%clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


/**
 *  » Affix.
 *  Helper Name: %affix-top, %affix-bottom
 *
 *  Usage:
 *    .bottom-menu {
 *      height: 200px;
 *      @extend %affix-bottom;
 *    }
 *
 *    <div class="bottom-menu"></div>
 */
%affix-top {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
}

%affix-bottom {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
}